<html>

  <TITLE>Design Reuse in HCI and Software Engineering - Michael Mahemoff's
  Thesis</TITLE>
</head>

<body>
<a href="/">Mahemoff.com</a>


<center>
<H1> Design Reuse in HCI and Software Engineering<br>
</H1>
</center>

<!-- <P> Coming Soon: Planet Pattern Language for software internationalisation
(PLOP 1999), Reusing Knowledge about Users (ACRE 1999), Safety-critical
usability patterns... -->

<P> These papers were published during my PhD thesis,  <A
HRef="/paper/thesis/abstract.shtml">"Design Reuse in Human-Computer Interaction
and Software Engineering"</A> (Mahemoff, 2001).  In addition to papers directly
on that topic, there is a paper on internationalisation (known to some as
"internationalization") and another on model-view-controller, because those
topics were used as the basis for two of <A Href="patternLanguages.shtml">the
pattern languages that were created</A> during the thesis.  There is also a <A
Href="refereed.shtml">bibliography of refereed papers</A>.

<P> Below are postscript/PDF versions, as well as some HTML versions. The HTML
versions were produced by a unique blend of <A
href="http://www.latex2html.org/">LaTeX2HTML</A> and <A
href="http://www.vim.org">Vim</A>.

<P> Please send comments, questions, and flames <a
href="http://mahemoffcom/contact">here</a>. Any feedback is welcome!

<HR>

<H1>Pattern Languages and Design Reuse in Human-Computer Interaction</H1>

<I>Ordered by significance to thesis research.</I>

<UL>
<P> <LI> Mahemoff, M. J. and Johnston, L. J.<span class="paperTitle"> Usability
Pattern Languages: the "Language" Aspect</span>. In Hirose M. (ed.),
  Human-Computer Interaction: Interact '01, Tokyo, Japan, pages 350-358, IOS
  Press (For IFIP).
    <BR> <span class="listTitle"> Abstract </span>
    The pattern language concept, adapted from building architecture and
    detailed software design, has recently been applied to HCI by a number
    of researchers. We argue that the ``language'' aspect of pattern languages
    is critical and outline thirteen research efforts in HCI patterns. Many
    pattern collections have broad scopes, and we argue that this results in
    patterns which are not as interdependent as a narrow scope would allow.
    The argument is illustrated with our Planet pattern language, which helps
    developers reuse knowledge for internationalised software. The narrow
    scope, namely a focus on the needs of internationalised users, allows us to
    produce interdependent patterns which range in abstraction level, from
    organisational process to high-level specification to detailed software
    design. Thus, the language supports a generative, interdisciplinary,
    approach to reusing knowledge in HCI.
 <BR>
    <span class="listTitle"> Entire Document </span>  
    <A
    HREF="/paper/language/language.pdf">PDF</A> | <A Href="language/">HTML</A><BR>

<P> <LI>
    Mahemoff, M. J. and Johnston, L. J. (1998).
    <span class="paperTitle"> Principles for a Usability-Oriented Pattern
    Language </span>
    In Calder, P. and Thomas, B. (Eds.), <EM> OZCHI '98 Proceedings
    </EM>, 132-139. 
    Los Alamitos, CA. [In Adelaide, Australia, November 30 to December 4,
    1998] <br>
    <A HREF="principles/">http://mahemoff.com/paper/principles/ </A>

    <BR> <span class="listTitle"> Abstract </span>
    High-level usability principles (e.g. ``Familiarity'') are difficult to
    apply to specific projects, and style guides providing more detailed
    instructions are often misinterpreted and inaccessible. An approach to
    usability based on design patterns enables designers to learn how
    certain recurring problems can be solved according to high-level
    principles. This paper summarises a review of the desirable properties
    advocated by five popular style guides, and discusses how this list has
    been modified to provide an underlying philosophy which is appropriate
    for a usability-oriented pattern language. A sample pattern which
    exemplifies this philosophy, involving iteration through selectable
    objects, is described.
    <BR>
    <span class="listTitle"> Entire Document </span>
    <A HREF="principles.ps">Postscript</A>    |
    <A HREF="principles/">HTML</A>

<P> <LI> 
    Mahemoff, M. J. and Johnston, L. J. (2000).
    <span class="paperTitle">Brainstorming with Generic Tasks: An Empirical
    Investigation</span> In Paris, C., Ozkan, N., Howard, S., and Lu, S.
    (eds.), <EM>  OZCHI 2000 Proceedings</EM>, 224-231.
    CHISIG, Ergonomics Society of Australia, Sydney, 2000.
    <BR> <span class="listTitle"> Abstract </span>
    This paper addresses the concept of generic tasks--low-level tasks which
    recur across different systems (e.g. remove, compare).  We propose that
    generic tasks can facilitate rapid brainstorming of functionality
    during early system design, and also indicate that they could provide a
    common vocabulary for concepts at a higher level of abstraction than UI
    objects. A taxonomy of generic tasks was prepared from fourteen
    software projects; a pilot study was conducted to investigate how
    people use the generic tasks. In this study, six subjects were
    presented with two hypothetical systems, and initially used a standard
    structured technique to propose as many new tasks as possible for each.
    Subsequently, they were introduced to the generic task list.  The
    results indicate that using the list helped subjects to generate new
    tasks which they had not previously proposed.<BR>
    <span class="listTitle"> Entire Document </span>
    <A HREF="generic/activity-set.pdf">PDF</A>       |
    <A HREF="generic/html/index.shtml">HTML</A>

<P> <LI> Hussey, A. and Mahemoff, M. <span class="paperTitle"> Safety-Critical
Usability: Pattern-based Reuse of Successful Design Concepts</span>. In M. McNicol (ed.), 4th
      Australian Workshop on Industrial Experience with Safety Critical Systems and Software (SCS) 99, Canberra, Australia, pages 19-34, ACS.
    <BR> <span class="listTitle"> Abstract </span>
Users of safety-critical systems are expected to effectively control or monitor complex systems, with errors potentially leading to catastrophic
consequences. For such high-consequence systems, safety is of paramount importance and must be designed into the human-machine interface.
There are many case studies available which show how inadequate design practice led to poor safety and usability, but concrete guidance on good
design practices is scarce. This paper argues that the pattern language paradigm---which is widely used in the software design community---is
a suitable means of documenting appropriate design strategies. We discuss how typical usability-related properties (e.g., flexibility) need some
adjustment to be used for assessing safety-critical systems and document a pattern language which is based on corresponding
``safety-usability'' principles. 
 <BR>
    <span class="listTitle"> Entire Document </span>  
    <A
    HREF="http://mahemoff.com/papers/safetyscs/safetypatterns-scs1999.zip">Zipped
    postscript</A> | <A Href="safetyscs/">Rough, text-only, HTML</A><BR>

<P> <LI> 
    Mahemoff, M. J. and Johnston, L. J. (1999).
    <span class="paperTitle">Reusing Knowledge about Users.</span> In Zowghi, D. (ed.)
    <EM>Fourth Austrlaian Conference on Requirements Engineering (ACRE)</EM>,
    59-69. Macquarie University, Sydney, 1999.<br>

    <BR> <span class="listTitle"> Abstract </span>
    Requirements engineers should work towards specifications of systems
    which address both utility (relevance to user needs) and usability
    (e.g.  learnability, efficiency).  Our limitations in predicting human
    behaviour prevent us from preparing a user-centered specification from
    first principles.  We argue that developers can improve on the
    situation by reusing the discovered knowledge itself, as well as
    reusing the processes of obtaining and using that information.  The
    focus of this paper is internationalisation.  We describe the design of
    a repository of cultural knowledge, and a pattern language which
    captures the process of acquiring that knowledge.  Finally, we
    demonstrate our vision for these tools with an hypothesised scenario.
    <BR>
    <span class="listTitle"> Entire Document </span>
    <A HREF="planetreuse.pdf">PDF</A>


<P> <LI>
    Mahemoff, M. J. and Johnston, L. J. (1999).
    <span class="paperTitle"> The Planet Pattern Language for Software
    Internationalisation.</span> In Manolescu, D., and Wolf, B. (Eds.),
    <EM> Pattern Languages of Program Design (PLOP) 1999</EM>. [In
    Monticello, IL, September 15-18, 1999]<br>
    Proceedings online at <A
    HRef="http://jerry.cs.uiuc.edu/~plop/plop99/proceedings/">
    http://jerry.cs.uiuc.edu/~plop/plop99/proceedings/</A>.

    <BR> <span class="listTitle"> Abstract </span>
    
    There are compelling reasons to produce software for international
    audiences. The needs of users from diverse cultures must be taken into
    account if the software is to be usable and useful. Due to differences
    in language and user psychology, it is necessary to produce multiple
    versions of the same application. This leads to a large number of
    technical and non-technical issues. The Planet pattern language
    addresses the high-level issues which developers encounter in
    specifying requirements for international software. It helps developers
    document
    and access information about target cultures and shows them how these
    resources can help them to customise functionality and user-interface
    design. <BR>
    <span class="listTitle"> Entire Document </span>  
    <A
    HREF="http://jerry.cs.uiuc.edu/~plop/plop99/proceedings/Mahemoff/planet.pdf">PDF</A>
    | <A Href="planet/">Rough, text-only, HTML</A><BR>

<P> <LI> Interact '99 Workshop W3 (Pattern Languages) Position Paper <BR>
    <A HREF="interact1999position/">HTML</A>

<P> <LI> 
    Mahemoff, M. J. and Johnston, L. J. (1998).
    <span class="paperTitle"> Pattern Languages for Usability: An Investigation
    of Alternative Approaches. </span> In Tanaka, J. (Ed.), <EM> Asia-Pacific
    Conference on Human Computer Interaction (APCHI) 98 Proceedings </EM>,
    25-31.  Los Alamitos, CA: IEEE Computer Society. [In Shonan Village, Japan,
    July 15-17, 1998]

    <BR> <span class="listTitle"> Abstract </span>
    The best way to ensure usability is to treat human factors as an input to
    design, rather than merely evaluating prototypes or design
    documentation.  The capability of pattern languages to facilitate the
    design process, improve communication, and record design philosophies
    suggests that they may assist the user-centred design process.
    Researchers have not yet investigated in detail what a pattern language
    for usability would offer, or how it could be used. This paper explores
    several alternative conceptualisations of usability-oriented patterns.
    Patterns of tasks provide high-level detail about tasks users often
    perform and how they can be supported. User profile patterns help
    analysts ensure different kinds of users are supported.  Relationships
    between user-interface objects can also be captured by patterns,
    assisting system implementors by providing information more directly.
    Patterns of individual user-interface objects, as well as entire
    systems are also considered, but appear to have more limited
    application.  <BR>
    <span class="listTitle"> Entire Document </span>
    <A HREF="candidate.ps">Postscript</A>       |
    <A HREF="candidate/">HTML</A>


<P><LI><SPAN ID="safetyTech">
<span class="note"><span class="title">NOTE:</span> This is a full version of
  the above paper on Safety-Critical Systems</span>

  <BR>Mahemoff, M. and Hussey, A. (1999).
  <span class="paperTitle"> Patterns for
    Designing Safety-Critical Interactive Systems</span> <span class="em">
    Technical Report 1999/25, Department of Computer Science and Software
    Engineering, The University of Melbourne.</span>
    <BR> <span class="listTitle"> Abstract </span>

Users of safety-critical systems are expected to effectively control or monitor complex systems, with errors potentially leading to catastrophic
consequences. For such high-consequence systems, safety is of paramount importance and must be designed into the human-machine interface.
There are many case studies available which show how inadequate design practice led to poor safety and usability, but concrete guidance on good
design practices is scarce. This paper argues that the pattern language paradigm---which is widely used in the software design community---is
a suitable means of documenting appropriate design strategies. We discuss how typical usability-related properties (e.g., flexibility) need some
adjustment to be used for assessing safety-critical systems and document a pattern language which is based on corresponding
``safety-usability'' principles. 
 <BR>
    <span class="listTitle"> Entire Document </span>  
    <A
    HREF="http://www.cs.mu.oz.au/tr_submit/test/tr_db/mu_TR_1999_25-cp.ps.gz">GZipped postscript</A><BR>
</UL>

<BR><HR>
<H1> Software Internationalisation </H1>

<UL>
<P> <LI>
    Mahemoff, M. J. and Johnston, L. J. (1998).
    <span class="paperTitle"> Software Internationalisation: Implications for
    Requirements Engineering.</span> In Fowler, D. and Dawson, L. (Eds.), <EM>
    Proceedings of the Third Australian Workshop on Requirements
    Engineering</EM>, 83-90.  Deakin University: Geelong. [In Geelong,
    Australia, October 26-27, 1998]<br> <A HREF="/paper/reqsi18n/">
    http://mahemoff.com/papers/reqsi18n/ </A>

    <BR> <span class="listTitle"> Abstract </span>
    When developers produce software for users from different cultures,
    they should consider how both overt and covert cultural factors impact
    on the requirements.  Overt factors (e.g.  measurement units,
    calendars) are well-defined and easily understood.  Covert factors
    (e.g.  mental disposition, perception) are more vague and may not be
    immediately obvious.  Both types of factors demand early attention to
    produce usable software.  Usability tests and local consultants can
    help to identify requirements for internationalisation, but should be
    supplemented with recorded information about cultural factors. We
    provide a classification of factors which impact on requirements, and
    propose that it could form the basis for a repository of cultural
    information accessible by developers. <BR>
    <span class="listTitle"> Entire Document </span>  
    <A HREF="reqsi18n.ps">Postscript</A>    |
    <A HREF="reqsi18n/">HTML</A>

</UL>
<HR>
<H1> Software Architecture </H1>

<UL>
<P> <LI>
Mahemoff, M. J. and Johnston, L. J. (1999)
<span class="paperTitle">Handling Multiple Domain Objects
with Model-View-Controller</span>. In Mingins, C. and Meyer, B. (eds.),
Technology of Object-Oriented Languages and Systems 32, in Melbourne,
Australia, pages 28-39, Los Alamitos, CA: IEEE Comp. Soc.
<BR> <span class="listTitle"> Abstract </span>
The Model-View-Controller (MVC) architecture style separates software into
models representing core functionality, views which display the models to the
user, and controllers which let the user change the models. Although more
sophisticated architectures have since been developed, MVC is interesting
to explore because its simplicity makes it more acceptable to practitioners and
it is beginning to become well-known in industry. However, MVC is rarely
studied with regard to systems containing more than one domain model. Several
issues are either ambiguous or missing in the literature: the distinction
between views and controllers, the way model states are updated in a
multiple-model architecture, and the creation of reusable domain-specific
components. A program was developed to investigate these issues, and this
paper documents the corresponding design decisions. MVC proved
helpful in creating a multiple-model system with reusable components, although
some weaknesses remain.

    <BR>
    <span class="listTitle"> Entire Document </span>  
    <A
    HREF="http://mahemoff.com/paper/mvc/mvc.pdf">PDF
    </A>

</UL>

<p>
<a rel="license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by/3.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 Unported License</a>.
</p>

